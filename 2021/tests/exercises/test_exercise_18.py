import pytest

from adventofcode.exercises import exercise_18
from adventofcode import utils


TEST_DATA = """[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
[[[5,[2,8]],4],[5,[[9,9],0]]]
[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
[[[[5,4],[7,7]],8],[[8,3],8]]
[[9,3],[[9,9],[6,[4,9]]]]
[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]
"""


@pytest.mark.parametrize(
    "test_input,expected",
    [
        ["[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]", "[[[[0,7],4],[[7,8],[6,0]]],[8,1]]"],
        [
            "[[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]],[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]]",
            "[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]",
        ],
        [
            "[[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]],[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]]",
            "[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]",
        ],
        [
            "[[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]],[7,[5,[[3,8],[1,4]]]]]",
            "[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]",
        ],
        [
            "[[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]],[[2,[2,2]],[8,[8,1]]]]",
            "[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]",
        ],
        [
            "[[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]],[2,9]]",
            "[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]",
        ],
    ],
)
def test_example_on_reduce(test_input, expected):
    assert exercise_18.reduce(test_input) == expected


@pytest.mark.parametrize(
    "test_input,expected",
    [
        ["[[1,2],[[3,4],5]]", 143],
        ["[[[[0,7],4],[[7,8],[6,0]]],[8,1]]", 1384],
        ["[[[[1,1],[2,2]],[3,3]],[4,4]]", 445],
        ["[[[[3,0],[5,3]],[4,4]],[5,5]]", 791],
        ["[[[[5,0],[7,4]],[5,5]],[6,6]]", 1137],
        ["[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]", 3488],
    ],
)
def test_magnitude_examples(test_input, expected):
    assert exercise_18.magnitude(test_input) == expected


def test_example_on_exercise_a():
    assert exercise_18.run_a(TEST_DATA) == 4140


def test_returns_correct_answer_on_exercise_a():
    input_data = utils.load_data(exercise_18.EXERCISE)
    assert exercise_18.run_a(input_data) == 4008


def test_example_on_exercise_b():
    assert exercise_18.run_b(TEST_DATA) == 3993


def test_returns_correct_answer_on_exercise_b():
    input_data = utils.load_data(exercise_18.EXERCISE)
    assert exercise_18.run_b(input_data) == 4667
